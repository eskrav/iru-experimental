plot.background = element_rect(fill = "transparent", colour="transparent", size=1), # bg of the plot
#    panel.grid.major = element_blank(), # get rid of major grid
#    panel.grid.minor = element_blank(), # get rid of minor grid
#    legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
panel.border = element_rect(colour = "black", fill=NA, size=1),
strip.background = element_rect(color = "black", fill = "#9cb0c9", size = 1),
strip.text.x = element_text(size = 18, face="bold"),
strip.text.y = element_text(size = 18, face="bold")
)+
theme(axis.text.x = element_text(size=18, colour="black")) +
theme(axis.text.y = element_text(size=18, colour="black")) +
theme(axis.title.y=element_text(size=18))+
theme(axis.title.x=element_text(size=18))+
theme(aspect.ratio=2.5/4)+ theme(legend.text=element_text(size=16))
plot + geom_errorbar(data = ci, aes(ymax=ciu,  ymin=cil), stat = 'identity', position = 'identity', width=0.15, size=0.75)
# Chunk 11
cat(ToPshortContB)
# Chunk 12
cat(ToPshortContP)
# Chunk 13
cat(ToPlongContB)
# Chunk 14
cat(ToPlongContP)
# Chunk 15: ToP RE
data$Continuation <- parse_factor(data$Continuation, c("Subject","Object"), include_na=FALSE, ordered=TRUE)
ci <- data %>%
filter(type == "ToP" & !is.na(answerForm)) %>%
group_by(length,cont_bias,Continuation) %>%
summarise(average=sum(answerForm=="Pronoun")/length(answerForm),cil=prop.test(sum(answerForm=="Pronoun"), length(answerForm), conf.level=0.95, correct = FALSE)$conf.int[1],ciu=prop.test(sum(answerForm=="Pronoun"), length(answerForm), conf.level=0.95, correct = FALSE)$conf.int[2])
ci$answerForm <- "Pronoun"
filter(data, type=="ToP" & !is.na(answerForm)) %>%
ggplot(aes(x = Continuation, fill = answerForm)) +
geom_bar(position = "fill") +
facet_grid(length ~ cont_bias) +
scale_y_continuous(labels = percent_format()) +
labs(x="Continuation",fill="RE Form", y="Percent Pronouns") +
scale_fill_brewer(palette = "Greens") +
#  ggtitle("IC Verbs") +
theme(
panel.background = element_rect(fill = "white"), # bg of the panel
plot.background = element_rect(fill = "transparent", colour="transparent", size=1), # bg of the plot
#    panel.grid.major = element_blank(), # get rid of major grid
#    panel.grid.minor = element_blank(), # get rid of minor grid
#    legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
panel.border = element_rect(colour = "black", fill=NA, size=1),
strip.background = element_rect(color = "black", fill = "#9cb0c9", size = 1),
strip.text.x = element_text(size = 18, face="bold"),
strip.text.y = element_text(size = 18, face="bold")
)+
theme(axis.text.x = element_text(size=18, colour="black")) +
theme(axis.text.y = element_text(size=18, colour="black")) +
theme(axis.title.y=element_text(size=18))+
theme(axis.title.x=element_text(size=18))+
theme(aspect.ratio=3/3) +
geom_errorbar(data = ci, aes(ymax=ciu,  ymin=cil), stat = 'identity', position = 'identity', width=0.15, size=0.75) + theme(legend.text=element_text(size=16))
# Chunk 16
cat(RefAllB)
# Chunk 17
cat(RefAllP)
# Chunk 18
cat(ToPrefAllB)
# Chunk 19
cat(ToPrefAllP)
# Chunk 1: setup
rm(list=ls())
library(tidyr)
library(readr)
library(dplyr)
library(stringr)
library(lme4)
library(ggplot2)
library(scales)
library(jsonlite)
library(knitr)
data <- read_csv("/Users/ekravtch/Shared/referring-expressions/data/all_data_annotated.csv")
goodPart1 <- c("59296fb2e8a7ff000163f033","5758948e00ca320007267deb","58c3a8c1b101a70001293790","57223b1c01ed330011374d93","55ae9a7bfdf99b5c7532994a","59148b501d55e90001cd04fa","595340809cd0120001df7ff5","57288b3f2865c4000e42c16d","55bfee25fdf99b56b50179eb","558aab19fdf99b65685f0142","5842df9887077d0001ad89b6","58cae12227e23a0001b4faf3","595ad772833cb2000154235c","57b0e0277030f200018c2dfb","58f96e73b778bb00014e5094","58d876b14240e50001190090","596528221d5c3e00012f0e0c","58ef6ad040baf30001228d2c","5735e6762e86af10a861bc16","59478e8cc1656d00014d6b34","590fd34212802600017e1150","579f1d3bc9abeb0001af52d8","57581be800ca3200072679b3","58d3dad59dbe3f0001258f66","589fc07f1521230001ebf494","5928f2ba6579ca0001edb6a9","592632d090a4ff000103e192","590907cc41a7520001e7f1fb","58cb2d155866f200017c7248","584653f942041d00012593d4","5962eb69241f8d0001064bd3","5513256cfdf99b1607b1f47b","56e6a66af6ed900006a5867c","57ebc604315f7f0001221cce","57bfc1beef05670001ee84c2","57eded6b226dff0001579cae","58f390b1e174d70001585a94","5967f2b1281d7e0001d23dbe","595b93be7882150001240e21","58cbd0a55d42920001414dd3","58cc9fb87f7f9f0001c2d88b","58c2b049efb64f00013582da","59360314da541f000146f49f","572c2f6834b25a0010ddfc72","57d921cb011c350001353b15","59601025b692380001417897","5953462b2d8f240001481c53","5847400ba7722e00013056ef","592dc86c61bcd8000107c131","58e95834f3f183000171167a","5943c3cf236bda0001d25c9b","581a4269afdb0d0001041b1e","58fa89115d7d3200017115b6","591d369e88bbb500013a8517","5663f3a61e460a001163384c","570521cfde5095001018a0c8","59014ee029f42300013cc5b7","582ee44408b46b00010dbb07","55a47692fdf99b126e625257","594c1e5a9160cb00011d6474","58a879bac5bcf000011b15d7","55b8d0bffdf99b0f2859fe73","580a34af5773b50001aab166","569daf4e3b2034000a4f3e71","5699c8be25d9e90006b08ed3","57b37da1a18afd00013e0298","57699e73abc1210001577541","587ae0d92c89f100011ca585","581d1e8688c9e500017d75e5","56ca4bc82a2631000bcab43d","58bcc4a8d294c10001017ca7","58a1cf6e9e040a0001399605","583748dafb65a0000128b059","57f04d958634a40001b1faf4","575aee8152c3fe00091a6252","5966886dee2508000108b02c","57bedd51eb2a5400013425c4","58cec6c08460040001e1ee79","57af9cdda169b50001a434e3","576a170d688a5c00018d95f0","58a9bada6a8d3b00017eccc2","55cb92aafdf99b45e4bb1165","581fcf9e8fbbba0001c0aa8a","57237b5b84458100130240bc","59417543c768a500011c9731","59676b9c90f22c00011b11d9","56ee14c665ca4d000dc39e69","56802e5fc5767f00121cc6a0","567744cb89319e001163d6a6","55bff22bfdf99b587856b996","5926080fe0aa8a000162f66b","599349fba2bbe00001883104","56f91ae77f69ff000aff9a09","55ae6a39fdf99b44a305f1eb","5996025a5f49420001cafcdc","5982618d0379b400014e06e9","5733d476b0b6ee1aa07af8bf","5682b7732c7f11000d3cbad3","583b397f54686200010f1d20","55ca03e1fdf99b2735fc1dde","57864054c9abeb0001af1dcc","585eb4cfc34844000174d807","5910882eae0ba20001b03abc","586371807fbbcd00013972ad","5699a00f25d9e9000db0a5b5","5983259c2c08900001964c07","58dd1bb5a3975d0001d6bade","59764fb5435a750001158fd1","545ccfd9fdf99b75ad2e3260","58f1dcf2c8b7eb0001878e57","5958ff3892b7c90001693bbc","59302683d0003800018f39b0","598372ae1b41a2000174ade6","56f2a338ed0cf6000c9156c7","593ab35d51244c00013dcb69","57276d56e386b9000f3f8248","56f7982b35c4760006278c61","55b13063fdf99b3f51f2b7e9","5970b4e2888ab80001040b0d","58a50aebbb9e0f0001aca2a7","596c4a4c67a8600001b71c44","58f3760092ac81000154f8af","596ffe2d5464cd0001940527","59088951faac6b000136c61d","5842d502174d68000198636b","5827177f8cba990001adf12d","597e78d513dc5e0001e2f818","579181fa913c71000197531b","58a47e0c39684200013742fe","598e7005cd940900013acdde","5804df31b80310000163f395","566f7754b937e400122ce30a","599af912bbe848000179684b","599314b360937e0001899338","59837ec704619b00011a8ddb","599096c08380cc00012a3d13","55b6e53bfdf99b438f10e3bb","57354198b0b6ee1e602e6a9d","58043bb3bd8a970001fdef44","5484821efdf99b07b28f2300","58be2fc3bfc0f4000179f3c5","58064d91f25c440001678a10","597d792815837000016ae769","56f2ad34ed0cf6000691331f","5588d7a1fdf99b304ee56840","580e703cf25c440001679421","5849751351f36f0001df75e5","59288c238bc6770001fc1d6e","598ba20f716a2c000187ce01","58fa3437f718c900016ea5e4","59bd14ded95ece0001875a80")
goodPart2 <- c("57dd766bbcd7150001ded5de","59109cdbc4643f00018bf8d9","5588b9e5fdf99b7f40e7f428","5589d076fdf99b18be320417","58a6597ba7d45800010438bd","57bf14513c449a000189c89a","55ddb84550a1f7000b90d65a","56a287dedbe850000cfd2aa5","590356378eff7400014101ff","59b9f39e11212f0001cd1274","56a37d86dbe850000bfcef9d","56ee521a65ca4d000cc39e55","59948cbdcf1d1700016efa45","59b40c88c05bb50001eb3ba4","59b5c28109494b0001313d3e","56888951d7848e000c39a122","5984cb70da239a0001fb81d6","58a4b1b61521230001ebfd11","59d035b819d3170001b1d63f","58a5e2fc27c3bb00014e7633","569d48e69e8363000c30a6b9","59bdeb96ab8d830001fe5ef1","55d7844969dbc30012b67f69","56770b8e193963000f51daa8","5816176700b325000184dba6","57b8ddd5387bea0001dcfe03","58f134679ba975000108db51","59a0eda8ec2f75000124ee6e","59c5a024916c4d0001094328","59cca6be46f7210001906b7f","59ac8dcc0acd5600012ec039","5723d6abccc7cc00086bb0d2","59c978563306be000195bcc6","5656389d995911000f482b7d","59e29e405de9b000017ecebf","59be1fac3a9ab60001119c1a","545d33b3fdf99b7f9e32559e","597558185b8fd30001951f77","5886fc8b15fdbf00012f1e63","57b4abf0f0ed6e0001517979","56e7a12053c5fa000ac117b6","5928b6414a05920001393ecf","5938e042e9b44100013ae891","59cd6c0f495eee00018b59ef","58d7f5cdd7073400012c7aa1","591d0422f8672e0001136a44","55b8113efdf99b4633359b7b","56f468d50800a6000c1bc5c1","59ce3d2adb0cc900014786af","58cefdb030c4cf0001ceb3ac","5588b04ffdf99b7a91e75ddb","57210674951c9b0011d3eaaa","58f8ae2138d7e7000132708a","57bf2f693aa21900017f7ae6","5962e5c8ba58f30001d48048","59fb9324087f2e0001ead5d0","5819469c0d4d2e0001753f68","584ec5d84e111700010b18a1","558957c3fdf99b6be52eb070","56842aba8f456f00054588fc","57fbe878035f6e0001d71a8c","58efc5633050380001608224","5658000ca9872d0011e1ba26","562d791e733ea0000516353e","59b4b2aa90ee4c0001d018eb","59ac5745a372d6000157eda7","5930214953490b00015635e4","59765c7c1a5010000184a760","55bd713cfdf99b4c1b12565d","5744a6037fd0ec000fb5163f","5a0872daff266c0001d1fdb5","59971ae5bbe84800017964d4","586ec433859653000107a06c","59949236c825cf0001d7dcdc","59efd0e6be399f0001e4a5f9","5a04869ff2e3460001edad2e","59c10e885c50560001df9302","596971a60e679d0001fac3e9","59067e147a22a80001849720","5a01a0fd728b1b0001ad89f8","5a18820d9b760100013a8429","590884b2ac756c0001ecb837","599bf0606c165e000113fe27","5a0bd0b67ecfc50001be1333","59246188ddfbc8000170ada0","5a03a7596e1ea9000124df9e","596a4e2c2dcbae0001d961d2","59daff10e776fd00015ec7ec","576b44b2811f2500014b2c72","5847399f75d2b20001fd446f","597d572d99bd880001772d8e","597b81f3de42bf000181db0b","5849061d0c097700012a1ed4","They are talking about, the next step to take to the coffee shop.","55bb9e77fdf99b2b5b1d5ce1","599de51717c03c000151b1f4","596bab8e0e679d0001fac8c8")
data <- filter(data, workerid %in% goodPart1 | workerid %in% goodPart2)
# summary(data)
data %>% glimpse()
data$cont_bias <- data$bias %>%
recode_factor(ic1="Subj.-Biased", ic2="Obj.-Biased", source_goal="Obj.-Biased", goal_source="Subj.-Biased")
data$bias_short <- data$bias %>%
recode_factor(ic1="Subj.", ic2="Obj.", source_goal="Obj.", goal_source="Subj.")
data$Continuation <- data$contGram %>%
recode_factor(S = "Subject", O = "Object")
data$workerid <- parse_factor(data$workerid, levels=NULL)
data$list <- parse_factor(data$list, levels=NULL)
data$bias <- parse_factor(data$bias, levels=NULL)
data$cont_bias <- parse_factor(data$cont_bias, levels=NULL)
data$type <- parse_factor(data$type, levels=NULL)
data$itemNum <- parse_factor(data$itemNum, levels=NULL)
data$length <- parse_factor(data$length, c("Short","Long"), include_na=FALSE, ordered=TRUE)
data$sGender <- parse_factor(data$sGender, levels=NULL)
data$Continuation <- parse_factor(data$Continuation, c("Object","Subject"), include_na=FALSE, ordered=TRUE)
data$contGender <- parse_factor(data$contGender, c("F","M"), include_na=FALSE)
data$contGram <- parse_factor(data$contGram, c("S","O"), include_na=FALSE, ordered=TRUE)
data$answerForm <- parse_factor(data$answerForm, c("long","pro"), include_na=FALSE, ordered=TRUE)
data$length <- data$length %>%
recode_factor(Short = "Names", Long="Descriptions")
data$answerForm <- data$answerForm %>% recode_factor(long="Noun",pro="Pronoun")
# Chunk 2: IC models
modelData <- filter(data, !is.na(answerForm))
modelData$cLength <- ifelse(modelData$length == "Descriptions", .5, -.5)
modelData$cBias <- ifelse(modelData$cont_bias == "Subj.-Biased", .5, -.5)
modelData$cReference <- ifelse(modelData$contGram == "S", .5, -.5)
modelLong <- glmer(answerForm~cReference*cBias + (cBias|workerid) + (1|itemNum), data=filter(modelData, type=="IC" & length=="Descriptions"), family=binomial)
IClongRefB <- round(summary(modelLong)$coefficients[4,1],2)
IClongRefP <- summary(modelLong)$coefficients[4,4]
IClongRefP <- ifelse(IClongRefP<.001,.001,ifelse(IClongRefP<.01,.01,ifelse(IClongRefP<.05,.05,round(IClongRefP,2))))
modelShort <- glmer(answerForm~cReference*cBias + (1|workerid) + (1|itemNum), data=filter(modelData, type=="IC" & length=="Names"), family=binomial)
ICshortRefB <- round(summary(modelShort)$coefficients[4,1],2)
ICshortRefP <- summary(modelShort)$coefficients[4,4]
ICshortRefP <- ifelse(ICshortRefP<.001,.001,ifelse(ICshortRefP<.01,.01,ifelse(ICshortRefP<.05,.05,round(ICshortRefP,2))))
modelAll <- glmer(answerForm~length + (length|workerid) + (1|itemNum), data=filter(modelData, type=="IC"), family=binomial)
ICrefAllB <- round(summary(modelAll)$coefficients[2,1],2)
ICrefAllP <- summary(modelAll)$coefficients[2,4]
ICrefAllP <- ifelse(ICrefAllP<.001,.001,ifelse(ICrefAllP<.01,.01,ifelse(ICrefAllP<.05,.05,round(ICrefAllP,2))))
###########
modelContS <- glmer(contGram~cBias + (cBias|workerid) + (cBias|itemNum), data=filter(modelData, type=="IC" & length=="Names"), family=binomial)
ICshortContB <- round(summary(modelContS)$coefficients[2,1],2)
ICshortContP <- summary(modelContS)$coefficients[2,4]
ICshortContP <- ifelse(ICshortContP<.001,.001,ifelse(ICshortContP<.01,.01,ifelse(ICshortContP<.05,.05,round(ICshortContP,2))))
modelContL <- glmer(contGram~cBias + (cBias|workerid) + (cBias|itemNum), data=filter(modelData, type=="IC" & length=="Descriptions"), family=binomial)
IClongContB <- round(summary(modelContL)$coefficients[2,1],2)
IClongContP <- summary(modelContL)$coefficients[2,4]
IClongContP <- ifelse(IClongContP<.001,.001,ifelse(IClongContP<.01,.01,ifelse(IClongContP<.05,.05,round(IClongContP,2))))
# Chunk 3: IC continuations
ci <- data %>%
filter(type == "IC" & !is.na(answerForm)) %>%
group_by(length,cont_bias) %>%
summarise(average=sum(Continuation=="Subject")/length(Continuation),cil=prop.test(sum(Continuation=="Subject"), length(Continuation), conf.level=0.95, correct = FALSE)$conf.int[1],ciu=prop.test(sum(Continuation=="Subject"), length(Continuation), conf.level=0.95, correct = FALSE)$conf.int[2])
ci$Continuation <- "Subject"
plot <- filter(data, type=="IC" & !is.na(answerForm)) %>%
ggplot(aes(x = cont_bias, fill = Continuation)) +
geom_bar(position = "fill") +
facet_grid(length ~ .) +
scale_y_continuous(labels = percent_format()) +
labs(x="Continuation Bias", y="Percent Subj. Continuations") +
scale_fill_brewer(palette = "Greens") +
#  ggtitle("IC Verbs") +
theme(
panel.background = element_rect(fill = "white"), # bg of the panel
plot.background = element_rect(fill = "transparent", colour="transparent", size=1), # bg of the plot
#    panel.grid.major = element_blank(), # get rid of major grid
#    panel.grid.minor = element_blank(), # get rid of minor grid
#    legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
panel.border = element_rect(colour = "black", fill=NA, size=1),
strip.background = element_rect(color = "black", fill = "#9cb0c9", size = 1),
strip.text.x = element_text(size = 18, face="bold"),
strip.text.y = element_text(size = 18, face="bold")
)+
theme(axis.text.x = element_text(size=18, colour="black")) +
theme(axis.text.y = element_text(size=18, colour="black")) +
theme(axis.title.y=element_text(size=18))+
theme(axis.title.x=element_text(size=18))+
theme(aspect.ratio=2.5/4)+ theme(legend.text=element_text(size=16))
plot + geom_errorbar(data = ci, aes(ymax=ciu,  ymin=cil), stat = 'identity', position = 'identity', width=0.15, size=0.75)
# Chunk 4
cat(ICshortContB)
# Chunk 5
cat(ICshortContP)
# Chunk 6: IC RE
data$Continuation <- parse_factor(data$Continuation, c("Subject","Object"), include_na=FALSE, ordered=TRUE)
ci <- data %>%
filter(type == "IC" & !is.na(answerForm)) %>%
group_by(length,cont_bias,Continuation) %>%
summarise(average=sum(answerForm=="Pronoun")/length(answerForm),cil=prop.test(sum(answerForm=="Pronoun"), length(answerForm), conf.level=0.95, correct = FALSE)$conf.int[1],ciu=prop.test(sum(answerForm=="Pronoun"), length(answerForm), conf.level=0.95, correct = FALSE)$conf.int[2])
ci$answerForm <- "Pronoun"
filter(data, type=="IC" & !is.na(answerForm)) %>%
ggplot(aes(x = Continuation, fill = answerForm)) +
geom_bar(position = "fill") +
facet_grid(length ~ cont_bias) +
scale_y_continuous(labels = percent_format()) +
labs(x="Continuation",fill="RE Form", y="Percent Pronouns") +
scale_fill_brewer(palette = "Greens") +
#  ggtitle("IC Verbs") +
theme(
panel.background = element_rect(fill = "white"), # bg of the panel
plot.background = element_rect(fill = "transparent", colour="transparent", size=1), # bg of the plot
#    panel.grid.major = element_blank(), # get rid of major grid
#    panel.grid.minor = element_blank(), # get rid of minor grid
#    legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
panel.border = element_rect(colour = "black", fill=NA, size=1),
strip.background = element_rect(color = "black", fill = "#9cb0c9", size = 1),
strip.text.x = element_text(size = 18, face="bold"),
strip.text.y = element_text(size = 18, face="bold")
)+
theme(axis.text.x = element_text(size=18, colour="black")) +
theme(axis.text.y = element_text(size=18, colour="black")) +
theme(axis.title.y=element_text(size=18))+
theme(axis.title.x=element_text(size=18))+
theme(aspect.ratio=3/3) +
geom_errorbar(data = ci, aes(ymax=ciu,  ymin=cil), stat = 'identity', position = 'identity', width=0.15, size=0.75)+ theme(legend.text=element_text(size=16))
# Chunk 7
cat(ICrefAllB)
# Chunk 8
cat(ICrefAllP)
# Chunk 9: TOP models
modelLong <- glmer(answerForm~cReference*cBias + (cReference|workerid) + (1|itemNum), data=filter(modelData, type=="ToP" & length=="Descriptions"), family=binomial)
ToPlongRefB <- round(summary(modelLong)$coefficients[4,1],2)
ToPlongRefP <- summary(modelLong)$coefficients[4,4]
ToPlongRefP <- ifelse(ToPlongRefP<.001,.001,ifelse(ToPlongRefP<.01,.01,ifelse(ToPlongRefP<.05,.05,round(ToPlongRefP,2))))
modelShort <- glmer(answerForm~cReference*cBias + (cReference|workerid) + (1|itemNum), data=filter(modelData, type=="ToP" & length=="Names"), family=binomial)
ToPshortRefB <- round(summary(modelShort)$coefficients[4,1],2)
ToPshortRefP <- summary(modelShort)$coefficients[4,4]
ToPshortRefP <- ifelse(ToPshortRefP<.001,.001,ifelse(ToPshortRefP<.01,.01,ifelse(ToPshortRefP<.05,.05,round(ToPshortRefP,2))))
modelAll <- glmer(answerForm~length + (length|workerid) + (length|itemNum), data=filter(modelData, type=="ToP"), family=binomial)
ToPrefAllB <- round(summary(modelAll)$coefficients[2,1],2)
ToPrefAllP <- summary(modelAll)$coefficients[2,4]
ToPrefAllP <- ifelse(ToPrefAllP<.001,.001,ifelse(ToPrefAllP<.01,.01,ifelse(ToPrefAllP<.05,.05,round(ToPrefAllP,2))))
# ###########
modelContS <- glmer(contGram~cBias + (cBias|workerid) + (cBias|itemNum), data=filter(modelData, type=="ToP" & length=="Names"), family=binomial)
ToPshortContB <- round(summary(modelContS)$coefficients[2,1],2)
ToPshortContP <- summary(modelContS)$coefficients[2,4]
ToPshortContP <- ifelse(ToPshortContP<.001,.001,ifelse(ToPshortContP<.01,.01,ifelse(ToPshortContP<.05,.05,round(ToPshortContP,2))))
modelContL <- glmer(contGram~cBias + (cBias|workerid) + (1|itemNum), data=filter(modelData, type=="ToP" & length=="Descriptions"), family=binomial)
ToPlongContB <- round(summary(modelContL)$coefficients[2,1],2)
ToPlongContP <- summary(modelContL)$coefficients[2,4]
ToPlongContP <- ifelse(ToPlongContP<.001,.001,ifelse(ToPlongContP<.01,.01,ifelse(ToPlongContP<.05,.05,round(ToPlongContP,2))))
modelData$cType <- ifelse(modelData$type=="ToP",0.5,-0.5)
modelData$cLength <- ifelse(modelData$length=="Descriptions",0.5,-0.5)
modelBoth <- glm(answerForm~cType*cLength*cBias*cReference, data=modelData, family=binomial)
RefAllB <- round(summary(modelBoth)$coefficients[2,1],2)
RefAllP <- summary(modelBoth)$coefficients[2,4]
RefAllP <- ifelse(RefAllP<.001,.001,ifelse(RefAllP<.01,.01,ifelse(RefAllP<.05,.05,round(RefAllP,2))))
# Chunk 10: ToP Continuations
data$Continuation <- parse_factor(data$Continuation, c("Object","Subject"), include_na=FALSE, ordered=TRUE)
ci <- data %>%
filter(type == "ToP" & !is.na(answerForm)) %>%
group_by(length,cont_bias) %>%
summarise(average=sum(Continuation=="Subject")/length(Continuation),cil=prop.test(sum(Continuation=="Subject"), length(Continuation), conf.level=0.95, correct = FALSE)$conf.int[1],ciu=prop.test(sum(Continuation=="Subject"), length(Continuation), conf.level=0.95, correct = FALSE)$conf.int[2])
ci$Continuation <- "Subject"
plot <- filter(data, type=="ToP" & !is.na(answerForm)) %>%
ggplot(aes(x = cont_bias, fill = Continuation)) +
geom_bar(position = "fill") +
facet_grid(length ~ .) +
scale_y_continuous(labels = percent_format()) +
labs(x="Continuation Bias", y="Percent Subj. Continuations") +
scale_fill_brewer(palette = "Greens") +
#  ggtitle("IC Verbs") +
theme(
panel.background = element_rect(fill = "white"), # bg of the panel
plot.background = element_rect(fill = "transparent", colour="transparent", size=1), # bg of the plot
#    panel.grid.major = element_blank(), # get rid of major grid
#    panel.grid.minor = element_blank(), # get rid of minor grid
#    legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
panel.border = element_rect(colour = "black", fill=NA, size=1),
strip.background = element_rect(color = "black", fill = "#9cb0c9", size = 1),
strip.text.x = element_text(size = 18, face="bold"),
strip.text.y = element_text(size = 18, face="bold")
)+
theme(axis.text.x = element_text(size=18, colour="black")) +
theme(axis.text.y = element_text(size=18, colour="black")) +
theme(axis.title.y=element_text(size=18))+
theme(axis.title.x=element_text(size=18))+
theme(aspect.ratio=2.5/4)+ theme(legend.text=element_text(size=16))
plot + geom_errorbar(data = ci, aes(ymax=ciu,  ymin=cil), stat = 'identity', position = 'identity', width=0.15, size=0.75)
# Chunk 11
cat(ToPshortContB)
# Chunk 12
cat(ToPshortContP)
# Chunk 13
cat(ToPlongContB)
# Chunk 14
cat(ToPlongContP)
# Chunk 15: ToP RE
data$Continuation <- parse_factor(data$Continuation, c("Subject","Object"), include_na=FALSE, ordered=TRUE)
ci <- data %>%
filter(type == "ToP" & !is.na(answerForm)) %>%
group_by(length,cont_bias,Continuation) %>%
summarise(average=sum(answerForm=="Pronoun")/length(answerForm),cil=prop.test(sum(answerForm=="Pronoun"), length(answerForm), conf.level=0.95, correct = FALSE)$conf.int[1],ciu=prop.test(sum(answerForm=="Pronoun"), length(answerForm), conf.level=0.95, correct = FALSE)$conf.int[2])
ci$answerForm <- "Pronoun"
filter(data, type=="ToP" & !is.na(answerForm)) %>%
ggplot(aes(x = Continuation, fill = answerForm)) +
geom_bar(position = "fill") +
facet_grid(length ~ cont_bias) +
scale_y_continuous(labels = percent_format()) +
labs(x="Continuation",fill="RE Form", y="Percent Pronouns") +
scale_fill_brewer(palette = "Greens") +
#  ggtitle("IC Verbs") +
theme(
panel.background = element_rect(fill = "white"), # bg of the panel
plot.background = element_rect(fill = "transparent", colour="transparent", size=1), # bg of the plot
#    panel.grid.major = element_blank(), # get rid of major grid
#    panel.grid.minor = element_blank(), # get rid of minor grid
#    legend.background = element_rect(fill = "transparent"), # get rid of legend bg
legend.box.background = element_rect(fill = "transparent"), # get rid of legend panel bg
panel.border = element_rect(colour = "black", fill=NA, size=1),
strip.background = element_rect(color = "black", fill = "#9cb0c9", size = 1),
strip.text.x = element_text(size = 18, face="bold"),
strip.text.y = element_text(size = 18, face="bold")
)+
theme(axis.text.x = element_text(size=18, colour="black")) +
theme(axis.text.y = element_text(size=18, colour="black")) +
theme(axis.title.y=element_text(size=18))+
theme(axis.title.x=element_text(size=18))+
theme(aspect.ratio=3/3) +
geom_errorbar(data = ci, aes(ymax=ciu,  ymin=cil), stat = 'identity', position = 'identity', width=0.15, size=0.75) + theme(legend.text=element_text(size=16))
# Chunk 16
cat(RefAllB)
# Chunk 17
cat(RefAllP)
# Chunk 18
cat(ToPrefAllB)
# Chunk 19
cat(ToPrefAllP)
modelData <- filter(data, !is.na(answerForm))
modelData$cLength <- ifelse(modelData$length == "Descriptions", .5, -.5)
modelData$cBias <- ifelse(modelData$cont_bias == "Subj.-Biased", .5, -.5)
install.packages("cacheSweave")
rm(list=ls())
library(tidyr)
library(readr)
library(dplyr)
library(stringr)
rm(list=ls())
library(tidyr)
library(readr)
library(dplyr)
library(stringr)
library(lme4)
library(ggplot2)
library(scales)
library(jsonlite)
library(knitr)
data <- read_csv("/Users/ekravtch/Shared/referring-expressions/data/all_data_annotated.csv")
goodPart1 <- c("59296fb2e8a7ff000163f033","5758948e00ca320007267deb","58c3a8c1b101a70001293790","57223b1c01ed330011374d93","55ae9a7bfdf99b5c7532994a","59148b501d55e90001cd04fa","595340809cd0120001df7ff5","57288b3f2865c4000e42c16d","55bfee25fdf99b56b50179eb","558aab19fdf99b65685f0142","5842df9887077d0001ad89b6","58cae12227e23a0001b4faf3","595ad772833cb2000154235c","57b0e0277030f200018c2dfb","58f96e73b778bb00014e5094","58d876b14240e50001190090","596528221d5c3e00012f0e0c","58ef6ad040baf30001228d2c","5735e6762e86af10a861bc16","59478e8cc1656d00014d6b34","590fd34212802600017e1150","579f1d3bc9abeb0001af52d8","57581be800ca3200072679b3","58d3dad59dbe3f0001258f66","589fc07f1521230001ebf494","5928f2ba6579ca0001edb6a9","592632d090a4ff000103e192","590907cc41a7520001e7f1fb","58cb2d155866f200017c7248","584653f942041d00012593d4","5962eb69241f8d0001064bd3","5513256cfdf99b1607b1f47b","56e6a66af6ed900006a5867c","57ebc604315f7f0001221cce","57bfc1beef05670001ee84c2","57eded6b226dff0001579cae","58f390b1e174d70001585a94","5967f2b1281d7e0001d23dbe","595b93be7882150001240e21","58cbd0a55d42920001414dd3","58cc9fb87f7f9f0001c2d88b","58c2b049efb64f00013582da","59360314da541f000146f49f","572c2f6834b25a0010ddfc72","57d921cb011c350001353b15","59601025b692380001417897","5953462b2d8f240001481c53","5847400ba7722e00013056ef","592dc86c61bcd8000107c131","58e95834f3f183000171167a","5943c3cf236bda0001d25c9b","581a4269afdb0d0001041b1e","58fa89115d7d3200017115b6","591d369e88bbb500013a8517","5663f3a61e460a001163384c","570521cfde5095001018a0c8","59014ee029f42300013cc5b7","582ee44408b46b00010dbb07","55a47692fdf99b126e625257","594c1e5a9160cb00011d6474","58a879bac5bcf000011b15d7","55b8d0bffdf99b0f2859fe73","580a34af5773b50001aab166","569daf4e3b2034000a4f3e71","5699c8be25d9e90006b08ed3","57b37da1a18afd00013e0298","57699e73abc1210001577541","587ae0d92c89f100011ca585","581d1e8688c9e500017d75e5","56ca4bc82a2631000bcab43d","58bcc4a8d294c10001017ca7","58a1cf6e9e040a0001399605","583748dafb65a0000128b059","57f04d958634a40001b1faf4","575aee8152c3fe00091a6252","5966886dee2508000108b02c","57bedd51eb2a5400013425c4","58cec6c08460040001e1ee79","57af9cdda169b50001a434e3","576a170d688a5c00018d95f0","58a9bada6a8d3b00017eccc2","55cb92aafdf99b45e4bb1165","581fcf9e8fbbba0001c0aa8a","57237b5b84458100130240bc","59417543c768a500011c9731","59676b9c90f22c00011b11d9","56ee14c665ca4d000dc39e69","56802e5fc5767f00121cc6a0","567744cb89319e001163d6a6","55bff22bfdf99b587856b996","5926080fe0aa8a000162f66b","599349fba2bbe00001883104","56f91ae77f69ff000aff9a09","55ae6a39fdf99b44a305f1eb","5996025a5f49420001cafcdc","5982618d0379b400014e06e9","5733d476b0b6ee1aa07af8bf","5682b7732c7f11000d3cbad3","583b397f54686200010f1d20","55ca03e1fdf99b2735fc1dde","57864054c9abeb0001af1dcc","585eb4cfc34844000174d807","5910882eae0ba20001b03abc","586371807fbbcd00013972ad","5699a00f25d9e9000db0a5b5","5983259c2c08900001964c07","58dd1bb5a3975d0001d6bade","59764fb5435a750001158fd1","545ccfd9fdf99b75ad2e3260","58f1dcf2c8b7eb0001878e57","5958ff3892b7c90001693bbc","59302683d0003800018f39b0","598372ae1b41a2000174ade6","56f2a338ed0cf6000c9156c7","593ab35d51244c00013dcb69","57276d56e386b9000f3f8248","56f7982b35c4760006278c61","55b13063fdf99b3f51f2b7e9","5970b4e2888ab80001040b0d","58a50aebbb9e0f0001aca2a7","596c4a4c67a8600001b71c44","58f3760092ac81000154f8af","596ffe2d5464cd0001940527","59088951faac6b000136c61d","5842d502174d68000198636b","5827177f8cba990001adf12d","597e78d513dc5e0001e2f818","579181fa913c71000197531b","58a47e0c39684200013742fe","598e7005cd940900013acdde","5804df31b80310000163f395","566f7754b937e400122ce30a","599af912bbe848000179684b","599314b360937e0001899338","59837ec704619b00011a8ddb","599096c08380cc00012a3d13","55b6e53bfdf99b438f10e3bb","57354198b0b6ee1e602e6a9d","58043bb3bd8a970001fdef44","5484821efdf99b07b28f2300","58be2fc3bfc0f4000179f3c5","58064d91f25c440001678a10","597d792815837000016ae769","56f2ad34ed0cf6000691331f","5588d7a1fdf99b304ee56840","580e703cf25c440001679421","5849751351f36f0001df75e5","59288c238bc6770001fc1d6e","598ba20f716a2c000187ce01","58fa3437f718c900016ea5e4","59bd14ded95ece0001875a80")
goodPart2 <- c("57dd766bbcd7150001ded5de","59109cdbc4643f00018bf8d9","5588b9e5fdf99b7f40e7f428","5589d076fdf99b18be320417","58a6597ba7d45800010438bd","57bf14513c449a000189c89a","55ddb84550a1f7000b90d65a","56a287dedbe850000cfd2aa5","590356378eff7400014101ff","59b9f39e11212f0001cd1274","56a37d86dbe850000bfcef9d","56ee521a65ca4d000cc39e55","59948cbdcf1d1700016efa45","59b40c88c05bb50001eb3ba4","59b5c28109494b0001313d3e","56888951d7848e000c39a122","5984cb70da239a0001fb81d6","58a4b1b61521230001ebfd11","59d035b819d3170001b1d63f","58a5e2fc27c3bb00014e7633","569d48e69e8363000c30a6b9","59bdeb96ab8d830001fe5ef1","55d7844969dbc30012b67f69","56770b8e193963000f51daa8","5816176700b325000184dba6","57b8ddd5387bea0001dcfe03","58f134679ba975000108db51","59a0eda8ec2f75000124ee6e","59c5a024916c4d0001094328","59cca6be46f7210001906b7f","59ac8dcc0acd5600012ec039","5723d6abccc7cc00086bb0d2","59c978563306be000195bcc6","5656389d995911000f482b7d","59e29e405de9b000017ecebf","59be1fac3a9ab60001119c1a","545d33b3fdf99b7f9e32559e","597558185b8fd30001951f77","5886fc8b15fdbf00012f1e63","57b4abf0f0ed6e0001517979","56e7a12053c5fa000ac117b6","5928b6414a05920001393ecf","5938e042e9b44100013ae891","59cd6c0f495eee00018b59ef","58d7f5cdd7073400012c7aa1","591d0422f8672e0001136a44","55b8113efdf99b4633359b7b","56f468d50800a6000c1bc5c1","59ce3d2adb0cc900014786af","58cefdb030c4cf0001ceb3ac","5588b04ffdf99b7a91e75ddb","57210674951c9b0011d3eaaa","58f8ae2138d7e7000132708a","57bf2f693aa21900017f7ae6","5962e5c8ba58f30001d48048","59fb9324087f2e0001ead5d0","5819469c0d4d2e0001753f68","584ec5d84e111700010b18a1","558957c3fdf99b6be52eb070","56842aba8f456f00054588fc","57fbe878035f6e0001d71a8c","58efc5633050380001608224","5658000ca9872d0011e1ba26","562d791e733ea0000516353e","59b4b2aa90ee4c0001d018eb","59ac5745a372d6000157eda7","5930214953490b00015635e4","59765c7c1a5010000184a760","55bd713cfdf99b4c1b12565d","5744a6037fd0ec000fb5163f","5a0872daff266c0001d1fdb5","59971ae5bbe84800017964d4","586ec433859653000107a06c","59949236c825cf0001d7dcdc","59efd0e6be399f0001e4a5f9","5a04869ff2e3460001edad2e","59c10e885c50560001df9302","596971a60e679d0001fac3e9","59067e147a22a80001849720","5a01a0fd728b1b0001ad89f8","5a18820d9b760100013a8429","590884b2ac756c0001ecb837","599bf0606c165e000113fe27","5a0bd0b67ecfc50001be1333","59246188ddfbc8000170ada0","5a03a7596e1ea9000124df9e","596a4e2c2dcbae0001d961d2","59daff10e776fd00015ec7ec","576b44b2811f2500014b2c72","5847399f75d2b20001fd446f","597d572d99bd880001772d8e","597b81f3de42bf000181db0b","5849061d0c097700012a1ed4","They are talking about, the next step to take to the coffee shop.","55bb9e77fdf99b2b5b1d5ce1","599de51717c03c000151b1f4","596bab8e0e679d0001fac8c8")
data <- filter(data, workerid %in% goodPart1 | workerid %in% goodPart2)
data %>% glimpse()
data$cont_bias <- data$bias %>%
recode_factor(ic1="Subj.-Biased", ic2="Obj.-Biased", source_goal="Obj.-Biased", goal_source="Subj.-Biased")
data$bias_short <- data$bias %>%
recode_factor(ic1="Subj.", ic2="Obj.", source_goal="Obj.", goal_source="Subj.")
data$Continuation <- data$contGram %>%
recode_factor(S = "Subject", O = "Object")
data$workerid <- parse_factor(data$workerid, levels=NULL)
data$list <- parse_factor(data$list, levels=NULL)
data$bias <- parse_factor(data$bias, levels=NULL)
data$cont_bias <- parse_factor(data$cont_bias, levels=NULL)
data$type <- parse_factor(data$type, levels=NULL)
data$itemNum <- parse_factor(data$itemNum, levels=NULL)
data$length <- parse_factor(data$length, c("Short","Long"), include_na=FALSE, ordered=TRUE)
data$sGender <- parse_factor(data$sGender, levels=NULL)
data$Continuation <- parse_factor(data$Continuation, c("Object","Subject"), include_na=FALSE, ordered=TRUE)
data$contGender <- parse_factor(data$contGender, c("F","M"), include_na=FALSE)
data$contGram <- parse_factor(data$contGram, c("S","O"), include_na=FALSE, ordered=TRUE)
data$answerForm <- parse_factor(data$answerForm, c("long","pro"), include_na=FALSE, ordered=TRUE)
data$length <- data$length %>%
recode_factor(Short = "Names", Long="Descriptions")
data$answerForm <- data$answerForm %>% recode_factor(long="Noun",pro="Pronoun")
modelData <- filter(data, !is.na(answerForm))
modelData$cLength <- ifelse(modelData$length == "Descriptions", .5, -.5)
modelData$cBias <- ifelse(modelData$cont_bias == "Subj.-Biased", .5, -.5)
modelData$cReference <- ifelse(modelData$contGram == "S", .5, -.5)
str(modelData)
modelData$workerid
modelLong <- glmer(answerForm~cReference*cBias + (cBias|workerid) + (1|itemNum), data=filter(modelData, type=="IC" & length=="Descriptions"), family=binomial)
IClongRefB <- round(summary(modelLong)$coefficients[4,1],2)
IClongRefP <- summary(modelLong)$coefficients[4,4]
IClongRefP <- ifelse(IClongRefP<.001,.001,ifelse(IClongRefP<.01,.01,ifelse(IClongRefP<.05,.05,round(IClongRefP,2))))
modelLong
IClongRefB
IClongRefP
modelShort <- glmer(answerForm~cReference*cBias + (1|workerid) + (1|itemNum), data=filter(modelData, type=="IC" & length=="Names"), family=binomial)
ICshortRefB <- round(summary(modelShort)$coefficients[4,1],2)
ICshortRefP <- summary(modelShort)$coefficients[4,4]
ICshortRefP <- ifelse(ICshortRefP<.001,.001,ifelse(ICshortRefP<.01,.01,ifelse(ICshortRefP<.05,.05,round(ICshortRefP,2))))
modelShort
ICshortRefB
ICshortRefP
modelAll <- glmer(answerForm~length + (length|workerid) + (1|itemNum), data=filter(modelData, type=="IC"), family=binomial)
ICrefAllB <- round(summary(modelAll)$coefficients[2,1],2)
ICrefAllP <- summary(modelAll)$coefficients[2,4]
ICrefAllP <- ifelse(ICrefAllP<.001,.001,ifelse(ICrefAllP<.01,.01,ifelse(ICrefAllP<.05,.05,round(ICrefAllP,2))))
modelAll
ICrefAllB
ICrefAllP
modelContS <- glmer(contGram~cBias + (cBias|workerid) + (cBias|itemNum), data=filter(modelData, type=="IC" & length=="Names"), family=binomial)
ICshortContB <- round(summary(modelContS)$coefficients[2,1],2)
ICshortContP <- summary(modelContS)$coefficients[2,4]
ICshortContP <- ifelse(ICshortContP<.001,.001,ifelse(ICshortContP<.01,.01,ifelse(ICshortContP<.05,.05,round(ICshortContP,2))))
modelContL <- glmer(contGram~cBias + (cBias|workerid) + (cBias|itemNum), data=filter(modelData, type=="IC" & length=="Descriptions"), family=binomial)
IClongContB <- round(summary(modelContL)$coefficients[2,1],2)
IClongContP <- summary(modelContL)$coefficients[2,4]
IClongContP <- ifelse(IClongContP<.001,.001,ifelse(IClongContP<.01,.01,ifelse(IClongContP<.05,.05,round(IClongContP,2))))
ICshortContB
ICshortContP
IClongContB
IClongContP
cat(ICrefAllB)
cat(ICrefAllP)
library(rlist)
nSubjects <- seq(1200,2400,100)
setwd("~/Shared/informationally-redundant-utterances/code/")
st <- list.load("st.rds")
powerVals <- lapply(st,function(x) x[[1]])
plot(nSubjects,unlist(lapply(powerVals,function(x) x[[9]])),type='l',ylab='Power',xlab="Number of subjects",ylim=c(0,1),lty=1)
lines(nSubjects,unlist(lapply(powerVals,function(x) x[[10]])),lty=2)
lines(nSubjects,unlist(lapply(powerVals,function(x) x[[11]])),lty=3)
legend(x=min(nSubjects),y=1.05,legend=c("Context*Condition","Ex. 1 vs. 2 C*C","Ex. 1+2 vs. 3 C*C"),lty=c(1,2,3),bty='n',cex=0.8)
library(knitr)
powerVals <- lapply(st,function(x) x[[1]])
plot(nSubjects,unlist(lapply(powerVals,function(x) x[[9]])),type='l',ylab='Power',xlab="Number of subjects",ylim=c(0,1),lty=1)
lines(nSubjects,unlist(lapply(powerVals,function(x) x[[10]])),lty=2)
lines(nSubjects,unlist(lapply(powerVals,function(x) x[[11]])),lty=3)
legend(x=2000,y=0.4,legend=c("Common Ground * Belief Measure","Ex. 1 vs. 2 C*C","Ex. 1+2 vs. 3 C*C"),lty=c(1,2,3),bty='n',cex=0.8)
powerVals <- lapply(st,function(x) x[[1]])
plot(nSubjects,unlist(lapply(powerVals,function(x) x[[9]])),type='l',ylab='Power',xlab="Number of subjects",ylim=c(0,1),lty=1)
lines(nSubjects,unlist(lapply(powerVals,function(x) x[[10]])),lty=2)
lines(nSubjects,unlist(lapply(powerVals,function(x) x[[11]])),lty=3)
legend(x=2000,y=0.5,legend=c("Common Ground * Belief Measure","Ex. 1 vs. 2 C*C","Ex. 1+2 vs. 3 C*C"),lty=c(1,2,3),bty='n',cex=0.8)
powerVals <- lapply(st,function(x) x[[1]])
plot(nSubjects,unlist(lapply(powerVals,function(x) x[[9]])),type='l',ylab='Power',xlab="Number of subjects",ylim=c(0,1),lty=1)
lines(nSubjects,unlist(lapply(powerVals,function(x) x[[10]])),lty=2)
lines(nSubjects,unlist(lapply(powerVals,function(x) x[[11]])),lty=3)
legend(x=2000,y=0.75,legend=c("Common Ground * Belief Measure","Ex. 1 vs. 2 C*C","Ex. 1+2 vs. 3 C*C"),lty=c(1,2,3),bty='n',cex=0.8)
nIterations=200
cat("Simulations (",nIterations,") \n----|--- 1 ---|--- 2 ---|--- 3 ---|--- 4 ---| --- 5 \n",sep="")
cat("Simulations (",nIterations,")
\n----|--- 1 ---|--- 2 ---|--- 3 ---|--- 4 ---| --- 5 \n",sep="")
cat("Simulations (",nIterations,")
----|--- 1 ---|--- 2 ---|--- 3 ---|--- 4 ---| --- 5 \n",sep="")
cat("Simulations (",nIterations,")
----|--- 1 ---|--- 2 ---|--- 3 ---|--- 4 ---| --- 5 \n",sep="")
fnPower <-
function(mu,beta1,beta2,beta3,beta4,beta5,beta6,beta7,beta8,beta9,beta10,beta11,sdItem,sdSubject,sdResid,nSubjects,nIterations,dots=TRUE){
start.time <- Sys.time()
if(dots) cat("Simulations (",nIterations,")
----|--- 1 ---|--- 2 ---|--- 3 ---|--- 4 ---| --- 5 \n",sep="")
# objects to store pvalue, beta, and standard error from each iteration of simulation
pVals <- betaVals <- seVals <- matrix(NA,nrow=nIterations,ncol=11)
# build design matrices
m <- matrix(NA,nrow=nSubjects*4,ncol=7)
colnames(m) <- c("worker","exp.alike","exp.diff","story",
"belief","common.ground","slider")
m[,1] <- rep(1:nSubjects,each=4)
m[,2] <- rep(c(-0.5,0.5,0),each=4,length.out=length(m[,2]))
m[,3] <- rep(c(-0.3333333,-0.3333333,0.6666667),each=4,length.out=length(m[,3]))
i <- 1
while(i < (length(m[,4]))){ m[i:(i+3),4] <- sample(1:24,size=4,replace=FALSE)
i <- i+4 }
m[,5] <- rep(c(-0.5, 0.5))
m[,6] <- rep(c(-0.5, 0.5),each=2)
# i <- 1 # (when testing for-loop)
for(i in 1:nIterations){
# draw random effects
itemRE <- rnorm(24,0,sdItem)
subjRE <- rnorm(nSubjects,0,sdSubject)
residRE <- rnorm(nrow(m),0,sdResid)
# create outcome
y <- mu + beta1*m[,2] + beta2*m[,3] + beta3*m[,6] + beta4*m[,5] + beta5*m[,2]*m[,6] + beta6*m[,3]*m[,6] + beta7*m[,2]*m[,5] + beta8*m[,3]*m[,5] + beta9*m[,6]*m[,5] + beta10*m[,2]*m[,6]*m[,5] + beta11*m[,3]*m[,6]*m[,5] + itemRE[m[,4]] + subjRE[m[,1]] + residRE
m[,7] <- y
dm <- as.data.frame(m)
dm$worker <- as.factor(dm$worker)
dm$story <- as.factor(dm$story)
# fit model, store p-value, beta and standard error
o <- lmer(slider ~ exp.alike + exp.diff + common.ground + belief + exp.alike:common.ground + exp.diff:common.ground + exp.alike:belief + exp.diff:belief + common.ground:belief + exp.alike:common.ground:belief + exp.diff:common.ground:belief + (1|story) + (1|worker),dm)
pVals[i,] <- coef(summary(o))[2:12,5]
betaVals[i,] <- coef(summary(o))[2:12,1]
seVals[i,] <- coef(summary(o))[2:12,2]
if(dots) cat(".",sep="")
if(dots && i %% 50 == 0) cat(i,"\n")
}
if(dots) cat("\nSimulation Run Time:",round(difftime(Sys.time(),start.time,units="hours"),3)," Hours \n")
# calculate power
powerOut <- apply(pVals,2,function(x) length(x[x<0.05])/length(x))
return(list(power=powerOut,p=pVals,beta=betaVals,se=seVals))
}
fnPower(mu=61.30956,beta1=0,beta2=0,beta3=0,beta4=0,beta5=0,beta6=0,beta7=0,beta8=0,beta9=0,beta10=0,beta11=0,sdItem=10.346,sdSubject=7.448,sdResid=25.853,nSubjects=1200,nIterations=10,dots=TRUE)
library(lme4)
library(lmerTest)
fnPower(mu=61.30956,beta1=0,beta2=0,beta3=0,beta4=0,beta5=0,beta6=0,beta7=0,beta8=0,beta9=0,beta10=0,beta11=0,sdItem=10.346,sdSubject=7.448,sdResid=25.853,nSubjects=1200,nIterations=10,dots=TRUE)
st
st$`subj 2100`
st$`subj 2100`$power
st$`subj 2100`$power[11]
st$`subj 1200`$power[9]
st$`subj 1300`$power[9]
st$`subj 1400`$power[9]
st$`subj 1500`$power[9]
st$`subj 1600`$power[9]
st$`subj 1700`$power[9]
st$`subj 1800`$power[9]
st$`subj 1900`$power[9]
st$`subj 2000`$power[9]
st$`subj 2100`$power[9]
st$`subj 2200`$power[9]
st$`subj 2300`$power[9]
st$`subj 2400`$power[9]
st$`subj 2200`$power[11]
st$`subj 1200`$power[10]
st$`subj 1200`$power[11]
st$`subj 1200`$power[10]
st$`subj 1300`$power[10]
st$`subj 1400`$power[10]
(lapply(powerVals,function(x) x[[10]])
)
unlist(lapply(powerVals,function(x) x[[10]]))
max((lapply(powerVals,function(x) x[[10]]))
)
lapply(powerVals,function(x) x[[10]]))
lapply(powerVals,function(x) x[[10]])
max(lapply(powerVals,function(x) x[[10]]))
cat(st$`subj 2100`$power[11])
cat(st$`subj 2100`$power[11])
